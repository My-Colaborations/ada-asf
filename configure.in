dnl Autoconf configure script for BfdAda
dnl Copyright 2001, 2002, 2003, 2005 Free Software Foundation, Inc.
dnl
dnl This file is part of BfdAda.
dnl 
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl 
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl 
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

dnl Process this file with autoconf to produce a configure script.

AC_INIT(src/asf.ads)

AC_CANONICAL_SYSTEM
dnl AM_MAINTAINER_MODE
AC_EXEEXT

# Current release settings
ASF_MAJOR_VERSION=0
ASF_MINOR_VERSION=2
ASF_MICRO_VERSION=1-dev
ASF_VERSION=$ASF_MAJOR_VERSION.$ASF_MINOR_VERSION.$ASF_MICRO_VERSION

# checking for local tools
AC_PROG_CC
# AM_PATH_GNAT
# AM_PATH_PERL
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_RANLIB

# Set the version number of GtkAda
AC_SUBST(ASF_VERSION)
AC_SUBST(ASF_MAJOR_VERSION)
AC_SUBST(ASF_MINOR_VERSION)
AC_SUBST(ASF_MICRO_VERSION)

EXEC_PREFIX="$prefix"
AC_SUBST(EXEC_PREFIX)

ASF_LIBDIR="lib"
AC_SUBST(ASF_LIBDIR)

##########################################
# Ada Util library
##########################################

AC_MSG_CHECKING([Ada Utility library (code.google.com/p/ada-util)])
AC_ARG_WITH(ada-util,
AS_HELP_STRING([--with-ada-util=x], [Path for the Ada Utility library (code.google.com/p/ada-util)]),
[
  UTIL_DIR=${withval}/
],
[
  echo "with \"util\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    UTIL_DIR=
  else
    UTIL_DIR=../util/
  fi;
  rm -f t.gpr
])
echo "with \"${UTIL_DIR}util\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_ERROR([Ada Utility library not found in ${UTIL_DIR}])
fi
rm -f t.gpr
AC_MSG_RESULT(${UTIL_DIR})
AC_SUBST(UTIL_DIR)

##########################################
# Ada Expression Language library
##########################################
AC_MSG_CHECKING([Ada Expression Language library (code.google.com/p/ada-el)])
AC_ARG_WITH(ada-el,
AS_HELP_STRING([--with-ada-el=x], [Path for the Ada Expression Language library (code.google.com/p/ada-el)]),
[
  EL_DIR=${withval}/
],
[
  echo "with \"el\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    EL_DIR=
  else
    EL_DIR=../el/
  fi;
  rm -f t.gpr
])
echo "with \"${EL_DIR}el\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_ERROR([Ada Expression Language library not found in ${EL_DIR}])
fi
rm -f t.gpr
AC_MSG_RESULT(${EL_DIR})
AC_SUBST(EL_DIR)

##########################################
# Ada Web Server
##########################################

AC_MSG_CHECKING([Ada Web Server library (http://libre.adacore.com/libre/tools/aws/)])
AC_ARG_WITH(aws,
AS_HELP_STRING([--with-aws=x], [Path for the Ada Web Server library (http://libre.adacore.com/libre/tools/aws/)]),
[
  AWS_DIR=${withval}/
],
[
  echo "with \"aws\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    AWS_DIR=
  else
    AWS_DIR=../aws/
  fi;
  rm -f t.gpr
])
echo "with \"${AWS_DIR}aws\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_ERROR([Ada Web Server not found in ${AWS_DIR}])
fi
rm -f t.gpr
AC_MSG_RESULT(${AWS_DIR})
AC_SUBST(AWS_DIR)

AC_OUTPUT(
Makefile asf.gpr tests.gpr samples.gpr asfunit.gpr
)
