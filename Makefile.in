## The type of library we want to build. Possible values:
##   relocatable
##   static
ASF_LIBRARY_TYPE=static

# You may edit this makefile as long as you keep these original 
# target names defined.
MODE=distrib
GNATMAKE=@GNATMAKE@
GNATCLEAN=gnatclean
GPRINSTALL=@GPRINSTALL@
SVN=svn
INSTALL=@INSTALL@

GPRPATH=asf.gpr
ASF_GPRPATH=asf_core.gpr
AWS_GPRPATH=asf_aws.gpr
ASF_UNIT_GPRPATH=asf_unit.gpr

BUILDS_SHARED=@BUILDS_SHARED@

version=@ASF_VERSION@

distdir=ada-asf-@ASF_VERSION@

DIST_FILE=ada-asf-@ASF_VERSION@.tar.gz

HAVE_AWS=@ASF_HAVE_AWS@

LN_S=@LN_S@
MKDIR=mkdir
CP=cp
LN=ln -s

ASF_SERVER=@ASF_SERVER@

ifeq (${OS},Windows_NT)
LIBEXT=dll
LIBVER=dll
else
LIBEXT=so
LIBVER=so.$(version)
endif

srcdir = .
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
top_builddir = .

# share/ada/adainclude
infix_inc=@ADA_INC_BASE@

# share/ada/adainclude
infix_prj=@ADA_PRJ_BASE@

# lib
infix_lib=@ADA_LIB_BASE@

# lib/ada/adalib
infix_ali=@ADA_ALI_BASE@

includedir=${prefix}/${infix_inc}
projectdir=${prefix}/${infix_prj}
bindir=${prefix}/bin
libdir=${prefix}/${infix_lib}
alidir=${prefix}/${infix_ali}
dynamodir=${prefix}/share/dynamo

libname=libada_asf
libprefix=$(libname)_

PROCESSORS=@NR_CPUS@
MAKE_ARGS=-XMODE=${MODE} -XASF_LIBRARY_TYPE=${ASF_LIBRARY_TYPE} -XPROCESSORS=$(PROCESSORS)
ifeq ($(ASF_LIBRARY_TYPE),relocatable)
MAKE_ARGS += -XUTIL_BUILD=relocatable -XUTIL_LIBRARY_TYPE=relocatable
MAKE_ARGS += -XEL_BUILD=relocatable -XEL_LIBRARY_TYPE=relocatable
MAKE_ARGS += -XSECURITY_BUILD=relocatable -XSECURITY_LIBRARY_TYPE=relocatable
MAKE_ARGS += -XXMLADA_BUILD=relocatable -XAWS_BUILD=relocatable
MAKE_ARGS += -XUTIL_HTTP_AWS_BUILD=relocatable -XUTIL_HTTP_AWS_LIBRARY_TYPE=relocatable
MAKE_ARGS += -XUTIL_UNIT_BUILD=relocatable -XUTIL_UNIT_LIBRARY_TYPE=relocatable
MAKE_ARGS += -XLIBRARY_TYPE=relocatable
endif

ifeq (${BUILDS_SHARED},yes)
all:     static shared
install: install_static install_shared install-info
else
all:     static
install: install_static install-info
endif

# Build executables for all mains defined by the project.
build: setup regtests/asf-testsuite.adb
	$(GNATMAKE) -m -p -P "$(ASF_GPRPATH)" $(MAKE_ARGS)
	test T${HAVE_AWS} = Tno || \
		$(GNATMAKE) -m -p -P "$(AWS_GPRPATH)" $(MAKE_ARGS)
	$(GNATMAKE) -m -p -Pasf_tests $(MAKE_ARGS)

static:
	$(MAKE) ASF_LIBRARY_TYPE=static build

shared:
	$(MAKE) ASF_LIBRARY_TYPE=relocatable build

setup: obj/asf/static lib/asf/static obj/asf-aws/static lib/asf-aws/static

obj/asf/static lib/asf/static obj/asf-aws/static lib/asf-aws/static:
	$(MKDIR) -p $@

# Build and run the unit tests
check test:	build-tests runtest

runtest:
	DIR=`pwd`; \
	export LD_LIBRARY_PATH="$$DIR/lib/asf/relocatable:$$DIR/lib/asfunit/relocatable:$$LD_LIBRARY_PATH"; \
	export PATH="$$DIR/lib/asf/relocatable:$$DIR/lib/asfunit/relocatable:$$PATH"; \
	bin/asf_harness -xml asf-aunit.xml -config test.properties

build-tests:	build
	$(GNATMAKE) -p -Pasf_tests $(MAKE_ARGS)

regtests/asf-testsuite.adb: regtests/asf-testsuite.gpb Makefile
	gnatprep -DASF_SERVER=$(ASF_SERVER) regtests/asf-testsuite.gpb $@

# Not intended for manual invocation.
# Invoked if automatic builds are enabled.
# Analyzes only on those sources that have changed.
# Does not build executables.
autobuild:
	$(GNATMAKE) -gnatc -c -k  -P "$(GPRPATH)"

# Clean the root project of all build products.
clean:	clean_test
	-rm -f lib/asf/*.a lib/asf/*.$(DLLEXT)
	-rm -f lib/asfunit/*.a lib/asfunit/*.$(DLLEXT)
	-rm -rf obj/* lib/*
	-rm -rf cov
	-rm -f asf-coverage.info asf-coverage-body.info

# Clean the files produced by the unit tests
clean_test:
	rm -rf regtests/result/*

# Clean root project and all imported projects too.
clean_tree:
	$(GNATCLEAN) -q -P "$(GPRPATH)" -r

# Check *all* sources for errors, even those not changed.
# Does not build executables.
analyze:
	$(GNATMAKE) -f  -gnatc -c -k  -P "$(GPRPATH)"

# Clean, then build executables for all mains defined by the project.
rebuild: clean build

# Build the coverage data and make a report using lcov and genhtml
coverage:  coverage-init runtest coverage-capture coverage-report

COVERAGE_OPTIONS= \
		 --directory src --directory asfunit --directory regtests \
		 --directory obj --directory obj/asf/static --directory obj/asfunit/static

coverage-init:
	lcov --no-external --initial --capture $(COVERAGE_OPTIONS) \
		 --output-file asf-coverage.info

coverage-capture:
	lcov --no-external --capture $(COVERAGE_OPTIONS) \
		 --output-file asf-coverage.info
	lcov --remove asf-coverage.info '*.ads' -o asf-coverage-body.info

coverage-report:
	mkdir -p cov
	genhtml --ignore-errors source asf-coverage-body.info --legend --title "Ada Server Faces" \
			--output-directory cov

# Files to package in source distribution
DISTFILES=README NEWS LICENSE.txt NOTICE.txt CHANGES config.guess configure config.sub \
configure.in Makefile.in install-sh distrib test.properties ChangeLog aclocal.m4 \
asf.gpr.in asf_core.gpr.in asf_aws.gpr.in asf_unit.gpr.in asf_tests.gpr.in samples.gpr.in config.gpr \
src asfunit samples regtests web bundles samples.properties dynamo.xml \
bin obj lib

dist:
	-rm -rf $(distdir)
	mkdir $(distdir)
	-chmod 777 $(distdir)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(distdir) && pwd`; \
	distdir=`cd $(distdir) && pwd`; \
	for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done
	-rm -rf $(distdir)/bin/*
	-rm -rf $(distdir)/obj/*
	-rm -rf $(distdir)/obj/asf/*
	-rm -rf $(distdir)/obj/asfunit/*
	-rm -rf $(distdir)/lib/*
	-rm -rf $(distdir)/lib/asf/*
	-rm -rf $(distdir)/lib/asfunit/*
	-rm -rf $(distdir)/regtests/result/*
	tar --exclude=.svn --exclude="*~" --exclude="*.o" --exclude="*.ali" \
	    --exclude="*.log" --exclude="*.a" \
	    -cvzf $(DIST_FILE) $(distdir)

install_static:
	$(MAKE) ASF_LIBRARY_TYPE=static install_lib

install_shared:
	$(MAKE) ASF_LIBRARY_TYPE=relocatable install_lib

install_lib:
ifneq (${GPRINSTALL},)
	$(GPRINSTALL) -p -f --prefix=${prefix} $(MAKE_ARGS) \
		--build-name=$(ASF_LIBRARY_TYPE) $(GPRPATH)
	$(GPRINSTALL) -p -f --prefix=${prefix} $(MAKE_ARGS) \
		--build-name=$(ASF_LIBRARY_TYPE) $(ASF_GPRPATH)
	$(GPRINSTALL) -p -f --prefix=${prefix} $(MAKE_ARGS) \
		--build-name=$(ASF_LIBRARY_TYPE) $(ASF_UNIT_GPRPATH)
	test T${HAVE_AWS} = Tno || \
	 $(GPRINSTALL) -p -f --prefix=${prefix} $(MAKE_ARGS) \
		--build-name=$(ASF_LIBRARY_TYPE) $(AWS_GPRPATH)
else
	-rm -rf ${includedir}/ada-asf ${includedir}/ada-asf-aws ${includedir}/ada-asf-unit
	-rm -rf ${alidir}/ada-asf ${alidir}/ada-asf-aws ${alidir}/ada-asf-unit
	$(MKDIR) -p ${includedir}/ada-asf
	$(MKDIR) -p ${includedir}/ada-asf-aws
	$(MKDIR) -p ${includedir}/ada-asf-unit
	$(MKDIR) -p ${projectdir}/
	${MKDIR} -p ${alidir}/ada-asf
	test T${HAVE_AWS} = Tno || \
		 ${MKDIR} -p ${alidir}/ada-asf-aws
	${MKDIR} -p ${alidir}/ada-asf-unit
	${CP} -p asfunit/*.ad[bs] ${includedir}/ada-asf-unit
	${CP} -p src/*.ad[bs] ${includedir}/ada-asf
	test T${HAVE_AWS} = Tno || \
		 ${CP} -p src/aws/*.ad[bs] ${includedir}/ada-asf-aws
	sed -e "s,LIBRARY_TYPE,$(ASF_LIBRARY_TYPE),g" < distrib/asf.gpr > ${projectdir}/asf.gpr
	sed -e "s,LIBRARY_TYPE,$(ASF_LIBRARY_TYPE),g" < distrib/asf_core.gpr > ${projectdir}/asf_core.gpr
	test T${HAVE_AWS} = Tno || \
		 sed -e "s,LIBRARY_TYPE,$(ASF_LIBRARY_TYPE),g" \
			 < distrib/asf_aws.gpr > ${projectdir}/asf_aws.gpr
	sed -e "s,LIBRARY_TYPE,$(ASF_LIBRARY_TYPE),g" \
		< distrib/asf_unit.gpr > ${projectdir}/asf_unit.gpr
	${CP} -p lib/asf/$(ASF_LIBRARY_TYPE)/*.ali ${alidir}/ada-asf
	${CP} -p lib/asfunit/$(ASF_LIBRARY_TYPE)/*.ali ${alidir}/ada-asf-unit
	test T${HAVE_AWS} = Tno || \
		 ${CP} -p lib/asf-aws/$(ASF_LIBRARY_TYPE)/*.ali ${alidir}/ada-asf-aws
ifeq ($(ASF_LIBRARY_TYPE),static)
	${CP} -p lib/asf/$(ASF_LIBRARY_TYPE)/$(libname).a ${libdir}/
	${CP} -p lib/asfunit/$(ASF_LIBRARY_TYPE)/$(libprefix)unit.a ${libdir}/
	test T${HAVE_AWS} = Tno || \
		 ${CP} -p lib/asf-aws/$(ASF_LIBRARY_TYPE)/$(libprefix)aws.a ${libdir}/
else
	test T${HAVE_AWS} = Tno || \
	   ${CP} -p lib/asf-aws/$(ASF_LIBRARY_TYPE)/$(libprefix)aws.$(LIBVER) ${libdir}/
	${CP} -p lib/asf/$(ASF_LIBRARY_TYPE)/$(libname).$(LIBVER) ${libdir}/
	${CP} -p lib/asfunit/$(ASF_LIBRARY_TYPE)/$(libprefix)unit.$(LIBVER) ${libdir}/
ifneq (${OS},Windows_NT)
	cd ${libdir} && \
	rm -f $(libname).$(LIBEXT) $(libprefix)aws.$(LIBEXT) $(libprefix)unit.$(LIBEXT) && \
	${LN} $(libname).$(LIBVER) $(libname).$(LIBEXT) && \
	${LN} $(libprefix)unit.$(LIBVER) $(libprefix)unit.$(LIBEXT) && \
	(test T${HAVE_AWS} = Tno || \
	   ${LN} $(libprefix)aws.$(LIBVER) $(libprefix)aws.$(LIBEXT))
endif
endif
endif
	${MKDIR} -p ${dynamodir}/asf/bundles
	${MKDIR} -p ${dynamodir}/asf/web
	(cd web && tar --exclude=.svn --exclude='*~' -cf - . )| (cd ${dynamodir}/asf/web && tar xf -)
	${CP} bundles/*.properties ${dynamodir}/asf/bundles/
	${CP} dynamo.xml ${dynamodir}/asf/
	${CP} NOTICE.txt ${dynamodir}/asf/
	${CP} LICENSE.txt ${dynamodir}/asf/

install-info:
ifeq (${GPRINSTALL},)
	@echo "Installation directories:"
	@echo "  Ada source files:    ${includedir}"
	@echo "  ALI files:           ${alidir}"
	@echo "  Libraries:           ${libdir}"
	@echo "  GNAT project:        ${projectdir}"
endif
	@echo "Environment setup:"
	@echo "  export ADA_PROJECT_PATH=${projectdir}:$$ADA_PROJECT_PATH"

uninstall:
ifneq (${GPRINSTALL},)
	-$(GPRINSTALL) -q -f --prefix=${prefix} $(MAKE_ARGS) --uninstall $(GPRPATH)
	-$(GPRINSTALL) -q -f --prefix=${prefix} $(MAKE_ARGS) --uninstall $(ASF_GPRPATH)
	-$(GPRINSTALL) -q -f --prefix=${prefix} $(MAKE_ARGS) --uninstall $(ASF_UNIT_GPRPATH)
	test T${HAVE_AWS} = Tno || \
	 $(GPRINSTALL) -q -f --prefix=${prefix} $(MAKE_ARGS) --uninstall $(AWS_GPRPATH)
else
	rm -rf ${includedir}/ada-asf
	rm -rf ${includedir}/ada-asf-aws
	rm -rf ${includedir}/ada-asf-unit
	rm -rf ${alidir}/ada-asf ${alidir}/ada-asf-aws ${alidir}/ada-asf-unit
	rm -f ${libdir}/$(libname).a
	rm -f ${libdir}/$(libprefix)aws.a
	rm -f ${libdir}/$(libprefix)unit.a
	rm -f ${libdir}/$(libname).$(LIBEXT)
	rm -f ${libdir}/$(libprefix)unit.$(LIBEXT)
	rm -f ${projectdir}/asf.gpr
	rm -f ${projectdir}/asf_unit.gpr
	rm -f ${projectdir}/asf_core.gpr
	rm -f ${projectdir}/asf_aws.gpr
	rm -rf ${awadir}/web
	rm -rf ${dynamodir}/asf
endif

# prepare before releasing a new version of the package
# (collect information about changes and SVN repository)
prepare-release:
	# ${SVN} update
	# ${SVN} info > CHANGES
	# ${SVN} log -v > ChangeLog
