dnl Autoconf configure script for Ada Server Faces
dnl Copyright (C) 2009, 2010, 2011, 2012, 2013 Stephane Carrez
dnl Written by Stephane Carrez (Stephane.Carrez@gmail.com)
dnl
dnl  Licensed under the Apache License, Version 2.0 (the "License");
dnl  you may not use this file except in compliance with the License.
dnl  You may obtain a copy of the License at
dnl
dnl     http://www.apache.org/licenses/LICENSE-2.0
dnl
dnl  Unless required by applicable law or agreed to in writing, software
dnl  distributed under the License is distributed on an "AS IS" BASIS,
dnl  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
dnl  See the License for the specific language governing permissions and
dnl  limitations under the License.
dnl 
dnl Process this file with autoconf to produce a configure script.

AC_INIT(src/asf.ads)

AC_CANONICAL_SYSTEM
dnl AM_MAINTAINER_MODE

# Current release settings
ASF_MAJOR_VERSION=1
ASF_MINOR_VERSION=0
ASF_MICRO_VERSION=0
ASF_VERSION=$ASF_MAJOR_VERSION.$ASF_MINOR_VERSION.$ASF_MICRO_VERSION

AC_CHECK_PROGS(GNATMAKE, gnatmake, "")

# checking for local tools
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_LN_S

# Set the version number of Ada Server Faces
AC_SUBST(ASF_VERSION)
AC_SUBST(ASF_MAJOR_VERSION)
AC_SUBST(ASF_MINOR_VERSION)
AC_SUBST(ASF_MICRO_VERSION)

EXEC_PREFIX="$prefix"
AC_SUBST(EXEC_PREFIX)

ASF_LIBDIR="lib"
AC_SUBST(ASF_LIBDIR)

AC_MSG_CHECKING([number of processors])
NR_CPUS=`getconf _NPROCESSORS_CONF 2>/dev/null || getconf NPROCESSORS_CONF 2>/dev/null || echo 1`
AC_MSG_RESULT($NR_CPUS)
AC_SUBST(NR_CPUS)

##########################################
# Check to enable/disable shared library
##########################################

AC_MSG_CHECKING([shared library support])
ac_enable_shared=no
AC_ARG_ENABLE(shared,
[  --enable-shared         Enable the shared libraries (disabled)],
[case "${enableval}" in
  no|none)  ac_enable_shared=no ;;
  *)        ac_enable_shared=yes ;;
esac])dnl

AC_MSG_RESULT(${ac_enable_shared})
BUILDS_SHARED=$ac_enable_shared
AC_SUBST(BUILDS_SHARED)

##########################################
# Ada Util library
##########################################

AC_MSG_CHECKING([Ada Utility library (code.google.com/p/ada-util)])
AC_ARG_WITH(ada-util,
AS_HELP_STRING([--with-ada-util=x], [Path for the Ada Utility library (code.google.com/p/ada-util)]),
[
  UTIL_DIR=${withval}/
],
[
  echo "with \"util\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    UTIL_DIR=
  else
    UTIL_DIR=../util/
  fi;
  rm -f t.gpr
])
echo "with \"${UTIL_DIR}util\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_ERROR([Ada Utility library not found in ${UTIL_DIR}])
fi
rm -f t.gpr
AC_MSG_RESULT(ok ${UTIL_DIR})
AC_SUBST(UTIL_DIR)

##########################################
# Ada Expression Language library
##########################################
AC_MSG_CHECKING([Ada Expression Language library (code.google.com/p/ada-el)])
AC_ARG_WITH(ada-el,
AS_HELP_STRING([--with-ada-el=x], [Path for the Ada Expression Language library (code.google.com/p/ada-el)]),
[
  EL_DIR=${withval}/
],
[
  echo "with \"el\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    EL_DIR=
  else
    EL_DIR=../el/
  fi;
  rm -f t.gpr
])
echo "with \"${EL_DIR}el\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_ERROR([Ada Expression Language library not found in ${EL_DIR}])
fi
rm -f t.gpr
AC_MSG_RESULT(ok ${EL_DIR})
AC_SUBST(EL_DIR)

##########################################
# Ada Security library
##########################################
AC_MSG_CHECKING([Ada Security library (code.google.com/p/ada-security)])
AC_ARG_WITH(ada-security,
AS_HELP_STRING([--with-ada-security=x], [Path for the Ada Security library (code.google.com/p/ada-security)]),
[
  SECURITY_DIR=${withval}/
],
[
  echo "with \"security\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    SECURITY_DIR=
  else
    SECURITY_DIR=../security/
  fi;
  rm -f t.gpr
])
echo "with \"${SECURITY_DIR}security\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_ERROR([Ada Security library not found in ${SECURITY_DIR}])
fi
rm -f t.gpr
AC_MSG_RESULT(ok ${SECURITY_DIR})
AC_SUBST(SECURITY_DIR)

##########################################
# Ada Web Server
##########################################

AC_MSG_CHECKING([AWS Server support])
ac_enable_aws=yes
AC_ARG_ENABLE(aws,
[  --enable-aws      Enable the AWS server support in Ada Server Faces (enabled)],
[case "${enableval}" in
  no|none)  ac_enable_aws=no ;;
  *)        ac_enable_aws=yes ;;
esac])dnl

AC_MSG_RESULT(${ac_enable_aws})

ASF_HAVE_AWS=no
ASF_SERVER=none
WITH_SERVER=
WITH_ASF_AWS=
if test T$ac_enable_aws = Tyes; then
  AC_MSG_CHECKING([Ada Web Server library (http://libre.adacore.com/libre/tools/aws/)])
  AC_ARG_WITH(aws,
  AS_HELP_STRING([--with-aws=x], [Path for the Ada Web Server library (http://libre.adacore.com/libre/tools/aws/)]),
[
  WITH_SERVER="with \"${withval}\";";
  AWS_DIR=${withval}/
],
[
  echo "with \"aws\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    AWS_DIR=
    ASF_HAVE_AWS=no
    WITH_SERVER="";
  else
    AWS_DIR=../aws/
    ASF_HAVE_AWS=yes
    WITH_SERVER="with \"aws\";";
  fi;
  rm -f t.gpr
])
echo "with \"${AWS_DIR}aws\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   # AC_MSG_ERROR([Ada Web Server not found in ${AWS_DIR}])
   AWS_DIR=
   WITH_SERVER="";
   ASF_HAVE_AWS=no
   ASF_SERVER=none
   AC_MSG_RESULT(Not found)
else
   ASF_SERVER=aws
   ASF_HAVE_AWS=yes
   WITH_SERVER="with \"${AWS_DIR}aws\";";
   WITH_ASF_AWS="with \"asf_aws\";";
   AC_MSG_RESULT(ok ${AWS_DIR})
fi
rm -f t.gpr

fi

AC_SUBST(AWS_DIR)
AC_SUBST(ASF_SERVER)
AC_SUBST(ASF_HAVE_AWS)
AC_SUBST(WITH_SERVER)
AC_SUBST(WITH_ASF_AWS)

AC_OUTPUT(
Makefile asf.gpr asf_core.gpr asf_aws.gpr tests.gpr samples.gpr asfunit.gpr distrib/asf.gpr distrib/asfunit.gpr distrib/asf_core.gpr distrib/asf_aws.gpr
)

